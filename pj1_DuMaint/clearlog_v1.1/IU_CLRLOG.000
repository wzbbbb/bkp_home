#!/bin/ksh 
###==========================================================================
#@(#) PROCEDURE: 	IU_CLRLOG
#@(#) OBJECT: 		purge operations logs, engines logs, universe.log 
#@(#)         		more than uxKEEP_JOB_LOG days old
#@(#) AUTHOR: 		JCO / ORSYP Inc.
#@(#) CREATION DATE: 	01/10/2002
#@(#) MODIFICATIONS:    ZWA
#@(#) MODIFICATIONS:	########1). A new variables expected to be assigned
#@(#) MODIFICATIONS:  	########$IsUproc : 'y' or 'n'
#@(#) MODIFICATIONS:	1) using variable: $PROCESS_MODE : i
#@(#) MODIFICATIONS:    [ $PROCESS_MODE =  'BATCH' ] && echo "This script is launched by $U"
#@(#) MODIFICATIONS:	2). uxKEEP_ARC are used in this script to tell if backup is needed.
#@(#) MODIFICATIONS:	 if $uxKEEP_ARC=0, no backup
#@(#) MODIFICATIONS:	3). A temporary file is used: $tmp$$
#@(#)
###==========================================================================

### set -x is set if S_DEBUG variable is true
[ "${S_DEBUG}" = "true" ] && set -x


###===========###
### Variables ###
###===========###

### Define local variables ( Capital letters for beginning of each syllable)

OutDir="${uxARCH_DIR}/${S_SOCIETE}_Unilog_${S_ESPEXE}_${S_DATRAIT}"

case ${S_ESPEXE} in
	A) LogDir=${UXLAP};;
	I) LogDir=${UXLIN};;
	S) LogDir=${UXLSI};;
	X) LogDir=${UXLEX};;
esac

tmp=/tmp/tmp$$
Pid="[${$}]"
echo " The PID of this script is: ${Pid} "


###===========###
### Functions ###
###===========###

MESSAGE ()
### object:	
###	echo a message in the job log and the history trace
### expects: 
### 	- $1: Message text
{
	echo ${1}
	#modified by ZWA
	#${UXEXE}/uxset step ${CntStep}
	[ "${PROCESS_MODE:-NONE}" = "BATCH" ] && ${UXEXE}/uxset msg "${1}"
}


TEST_ERROR ()
### object:	
###	Test if there was an error 
### expects: 
### 	- $1: Return Code
###  	- $2: Error message (optionnal)      
{
	if [ ${1} != 0 ] ; then  
		MESSAGE "### Fatal error detected in STEP${CntStep}"
		MESSAGE "### Return Code =${1}"
		MESSAGE "### Error Msg   =${2}"
		exit 1
	else
		MESSAGE "### Command completed."
		MESSAGE " "
	fi
}


STEP0 ()
### object:	
###	List operations logs older than ${uxKEEP_JOB_LOG}
{
	MESSAGE "### List of operations logs older than ${uxKEEP_JOB_LOG} days in ${LogDir} ### "	
	Command="find ${LogDir} -name \"${S_ESPEXE}*\" -mtime +${uxKEEP_JOB_LOG} -exec ls -l {} \;"
	MESSAGE "Running the command: ${Command} "	
	eval ${Command}
	TEST_ERROR ${?} "Can't list logs!"
}


STEP1 ()
### object:	
###	Remove operations logs older than ${uxKEEP_JOB_LOG}
{
	MESSAGE "### Remove these logs  ### "	
	Command="find ${LogDir} -name \"${S_ESPEXE}*\" -mtime +${uxKEEP_JOB_LOG} -exec rm -f {} \;"
	MESSAGE "Running the command: ${Command} "	
	eval ${Command}
	TEST_ERROR ${?} "Can't delete some logs!"
}


STEP2 ()
### object:	
###	Remove workload forcast temp file
{
	MESSAGE "### Remove these logs  ### "	
	Command="find ${LogDir} -name \"U_FSSB50*\" -exec rm -f {} \;"
	MESSAGE "Running the command: ${Command} "	
	eval ${Command}
	TEST_ERROR ${?} "Can't delete the workload forcast temp file!"
}


STEP3 ()
### object:	
###	Create unilog directory
{
if [ $uxKEEP_ARC -ne 0 ] ; then #added by ZWA
	MESSAGE "### Creation of Unilog directory : ${OutDir} ### "
	Command="[[ -d ${OutDir} ]] || mkdir -p ${OutDir}"
	MESSAGE "Running the command: ${Command}"	
	eval ${Command}
	TEST_ERROR ${?} "Can't create ${OutDir}!"
fi #added by ZWA
}


STEP4 ()
### object:	
###	Move Dollar Universe's logs in ${OutDir}
{
	cd ${LogDir}
	#[ -f *.log ] && FileList=$(echo *.log)
	#Modified by ZWA
        ls *.log 1>/dev/null 2>/dev/null
        [ "$?" -eq 0 ] && FileList=$(echo *.log)
        echo $FileList
        ls *.LOG 1>/dev/null 2>/dev/null
        [ "$?" -eq 0 ] && FileList="${FileList} *.LOG"
        echo $FileList
        #Modified by ZWA
	#[ -f *.LOG ] && FileList="${FileList} *.LOG"
if [ $uxKEEP_ARC -ne 0 ] ; then #added by ZWA
	for File in ${FileList}
	do
		MESSAGE "### Move ${File} in ${OutDir}"
		Command="mv ${LogDir}/${File} ${OutDir}"
		echo "Running the command: ${Command}"	
		eval ${Command}
		MESSAGE "### Restore ${File} in ${LogDir} with ${uxKEEP_NB_LINE} lines "
		Command="tail -${uxKEEP_NB_LINE} \"${OutDir}/${File}\" > \"${LogDir}/${File}\""
		echo "Running the command: ${Command}"	
		eval ${Command}
	done
else  #added by ZWA=================== 
	for File in ${FileList}
	do
		MESSAGE "### Restore ${File} in ${LogDir} with ${uxKEEP_NB_LINE} lines "
		Command="tail -${uxKEEP_NB_LINE} \"${LogDir}/${File}\" > \"${tmp}\" "
		echo "Running the command: ${Command}"	
		eval ${Command}
		Command="cat  \"${tmp}\" > \"${LogDir}/${File}\""
		echo "Running the command: ${Command}"	
		eval ${Command}
	done
fi #added by ZWA====================== 
}


STEP5 ()
### object:	
###	Tar unilog directory
{
if [ $uxKEEP_ARC -ne 0 ] ; then #added by ZWA
	MESSAGE "### Tar unilog directory : ${OutDir} ### "
	Command="tar -cvf ${OutDir}.tar ${OutDir}"
	MESSAGE "Running the command: ${Command} "	
	eval ${Command}
	TEST_ERROR ${?} "Can't Tar directory : ${OutDir}!"
fi #added by ZWA
}


STEP6 ()
### object:	
###	Compress Tar file
{
if [ $uxKEEP_ARC -ne 0 ] ; then #added by ZWA
	MESSAGE "### Compress Tar file ${OutDir}.tar ### "
	Command="compress -f ${OutDir}.tar"
	MESSAGE "Running the command: ${Command} "	
	eval ${Command}
	TEST_ERROR ${?} "Can't compress Tar file ${OutDir}.tar!"
fi #added by ZWA
}


STEP7 ()
### object:	
###	Clean temporary files
{
if [ $uxKEEP_ARC -ne 0 ] ; then #added by ZWA
	MESSAGE "### Remove unilog directory ${OutDir} ### "
	Command="rm -Rf ${OutDir}"
	MESSAGE "Running the command: ${Command} "	
	eval ${Command}
	TEST_ERROR ${?} "Can't remove directory ${OutDir}!"
fi #added by ZWA
}



###======###
### MAIN ###
###======###

#CntStep=${S_NUMJALON}
#Modified by ZWA
#CntStep=${S_NUMJALON}
#echo $IsUproc
if [ "${PROCESS_MODE:-NONE}" = "BATCH" ] ; then
	CntStep=${S_NUMJALON}
else
	CntStep=0
fi
let CntStep=${CntStep}

while  [[ ${CntStep} -lt ${NbStep} ]] 
do
	#modified by ZWA
	#${UXEXE}/uxset step ${CntStep}
	 [ "${PROCESS_MODE:-NONE}" = "BATCH" ] && ${UXEXE}/uxset step ${CntStep}
	MESSAGE "====================================== "
	STEP${CntStep}	
	let CntStep=CntStep+1
done
MESSAGE "### All the steps are completed ### "
#added by ZWA
rm $tmp
exit 0
