#!/bin/ksh
###################################################################
#                       UXTRACE UNIX                              #
###################################################################
# @(#) script sh but executed in ksh
# @(#) adapted by     : Alexandre RAYMOND (Orsyp SA)
# @(#) originally by  : Guy MULLER (Orsyp)
###################################################################
# modification : 0.7
# date     : 20080123
# author   : ZHI BING WANG (Orsyp SA)
# comments : adapted to 4.2, get more files, correct some bugs
##
UXTRACEVERSION="0.7"
# modification : 0.6
# date     : 20070516
# author   : Alexandre RAYMOND (Orsyp SA)
# comments : first draft version, usable
##
# modification : 0.5
# date     : 20070516
# author   : Alexandre RAYMOND (Orsyp SA)
# comments : finished merging my changes into the original uxtrace
##
# modification : 0.4
# date     : 20070515
# author   : Alexandre RAYMOND (Orsyp SA)
# comments : merged my changes back in the original uxtrace
##
# modification : 0.3
# date     : 20070515
# author   : Alexandre RAYMOND (Orsyp SA)
# comments : much code has been added to transpose functions to the
#            new system. Almost fully functional; lacks switches
##
# modification : 0.2
# date     : 20070514
# author   : Alexandre RAYMOND (Orsyp SA)
# comments : much code has been added to transpose functions to the
#            new system
##
# creation : 0.1
# date     : 20070511
# author   : Alexandre RAYMOND (Orsyp SA)
#


[ ${UXTRACEMODEX:-OFF} = ON ] && set -x ; [ ${UXTRACEMODEV:-OFF} = ON ] && set -v
#--------------------------------------------------------#
# Parametrisation variables
#--------------------------------------------------------#
# 	* modify the folder location of the created uxtrace package
#	* Default value 		/tmp
#	* Other values possibles	the absolute path of an existant folder
# UXTRACELOCATE="/tmp"

# 	* modify the sytem's screenshots taken
#	* Default value 		4 
#	* Other values possibles	a number between 1 and 80
# UXLOOPNUMBER=10

# 	* modify the waiting time between 2 system screenshots
#	* Default value 		15 
#	* Other values possibles	a number between 1 and 600
# UXSLEEPTIME=30

# 	* keep the created uxtrace folder
#	* Default value 		N
#	* Other values possibles	Y or y
# UXKEEPUXTRACEFOLDER=Y

# 	* disable the compression of the created uxtrace package
#	* Default value 		Y
#	* Other values possibles	N or n
# UXCOMPRESSUXTRACEFOLDER=N

# 	* Name of the customized script which is submitted at the end of the uxtrace
#	* Default value 		${UXMGR}/uxtrace_cust
#	* Other values possibles	<Complete path of a customized script>"
# UXCUSTSCRIPT=/tmp/uxtrace_cust

# 	* Submission mode of the customized script (sourced by default)
#	* Default value 		s
#	* Other values possibles	k
# UXLAUNCHCUSTSCRIPT=k

#--------------------------------------------------------#
# Debug Variables
#--------------------------------------------------------#
#UXTRACEMODEX=ON
#UXTRACEMODEV=ON

export S_U_LANGUE=EN
if [ -r uxsetenv_ksh_agtsap ] ; then
	_UXENVFILE=uxsetenv_ksh_agtsap 
	. ./uxsetenv_ksh_agtsap 

fi
if [ -r uxsetenv_agtsap.ksh ] ; then
	_UXENVFILE=uxsetenv_agtsap.ksh
	. ./uxsetenv_agtsap.ksh
fi
#--------------------------------------------------------#
# Internal variables (Do not modify them)
#--------------------------------------------------------#
# Parameters related to the directories to be listed in UX_DIRECTORY_LISTING
#unused UXCONFFOLDERALIAS=""
UXDATAFOLDERALIAS="_UXEXE _SRVNET_DIR _UXLOG _UXRFC_TMPPATH _U_TMP_PATH _UXSAP_AUTOPATH _UXDIR_ROOT"
_UXEXE="${UXSAP}/exec"
_SRVNET_DIR=${SRVNET_DIR}
_UXLOG=`dirname ${U_AGT_LOG}`
_UXRFC_TMPPATH=${UXRFC_TMPPATH}
_U_TMP_PATH=`dirname ${UXRFC_TMPPATH}`
_UXSAP_AUTOPATH=${UXSAP_AUTOPATH}
_UXDIR_ROOT=${UXSAP}

# Parameter related to in the UX_RIGHTS_ANALYSIS procedure
UXFOLDERALIAS="${UXCONFFOLDERALIAS} ${UXDATAFOLDERALIAS}"

# Parameters related to the files to be archived in UX_GET_FILES
UXGETFILESUXMGR="dev_rfc* *.trc uxsrsrv.sck uxsrsrv.alias uxsrsrv.protocol core* "
UXGETFILESOTHERS="${U_LOG_FILE} ${U_AGT_LOG} ${U_MSG_FILE} ${UXSAP_RFC_INI_FILE}  ${U_LIC_FILE} ${UXSAP}/mgr/uxsapagt.host" #absolute paths here!
UXGETFILESUXEXE="uxversion* core* "
UXGETFILESETC="hosts services"


#--------------------------------------------------------#
# Technical variables (Do not modify them)
#--------------------------------------------------------#
UXINITIALFOLDER=`pwd`
UXOS=`uname | sed  's/\//_/g'`
UXTRACEDATE=`date +%Y%m%d-%H%M%S`
UXTRACECOMPD0="$0"
UXTRACEDIRD0=`dirname "${UXTRACECOMPD0}"`
UXTRACEBASD0=`basename "${UXTRACECOMPD0}"`

if [ "${UXOS}" = "Linux" ]; then
	print "Test String" > /dev/null 2>&1
	[ $? -eq 0 ] && UX_PRINT=OK
fi

[ ${UXTRACEMODEX:-OFF} = ON ] && set +x ; [ ${UXTRACEMODEV:-OFF} = ON ] && set +v
#########################################################
# Helper Functions
#########################################################

# ----------------------------------------------- #
# MESSAGE FUNCTION
# ----------------------------------------------- #
UX_MESSAGE ()
{
loc_os=`uname`
case ${loc_os} in
	Linux )
		if [ ${UX_PRINT:-KO} = OK ]; then
			print "$1"
		else
			echo "$1"
		fi;;
	* )
		echo "$1"
	;;
esac
}
# ----------------------------------------------- #
# Help Function
# ----------------------------------------------- #
HELP ()
{
help_level=${1}
[ ${help_level:-0} -gt 0 ] && UX_MESSAGE "Unix uxtracesapmgr procedure version ${UXTRACEVERSION}"
UX_MESSAGE "Syntax : ${UXTRACECOMPD0} [-s] [-d] [-b] [-h [full]] [-o] [-p <string>] [-P]"
UX_MESSAGE "	Trace flags :"
UX_MESSAGE " 	 -s : Traces issues with system symptoms (more snapshots closer apart)"
UX_MESSAGE " 	 -p : Will run the specific procedure (variabilized by an argument) at the end of the trace"
UX_MESSAGE " 	      [-p <variabilisation of the script>]"
UX_MESSAGE "	 -P : Won't run the standard specific procedure at the end of the trace"
UX_MESSAGE " 	 -o : Considers that the SAP Manager is shutdowned (not recommended)"
UX_MESSAGE " 	      type ${UXTRACECOMPD0} -h for more information"
UX_MESSAGE "	Execution modes :"
UX_MESSAGE " 	 -d : Will divide the trace result into 3 packages instead of one package"
UX_MESSAGE " 	 -h : Displays short help"
UX_MESSAGE " 	 -h full : Displays global help (More details about the different options)"
UX_MESSAGE " 	      type ${UXTRACECOMPD0} -h full for more information"
[ ${help_level:-0} -eq 0 ] && return 1
UX_MESSAGE "Details for the different trace flags"
UX_MESSAGE " 	 -s : Traces issues with system symptoms"
UX_MESSAGE "		Defined as issues with system symptoms and/or an issue where the SAP Manager exhibits :"
UX_MESSAGE "		  - an abnormally long response time"
UX_MESSAGE "		  - a disproportionate amount of CPU consumption"
UX_MESSAGE "		  - no longer reacts"
UX_MESSAGE " 	 -p : Will run a specific procedure (using a variable argument) at the end of the trace"
UX_MESSAGE " 	 	For example if you wanted to source the following script at the end of the trace :"
UX_MESSAGE "		${UXCUSTSCRIPTDFT}_01"
UX_MESSAGE "		Use the -p parameter such as -p01, for example ${UXTRACECOMPD0} -scp01"
UX_MESSAGE "		Please notice that the following default script is always executed (if present) unless -P is specified."
UX_MESSAGE "		${UXCUSTSCRIPTDFT}"
UX_MESSAGE "	 -P : Won't run the standard specific procedure at the end of the trace"
UX_MESSAGE " 	 -o : Considers that the SAP Manager is shutdowned"
UX_MESSAGE " 	      A function in the ${UXTRACECOMPD0} procedure automaticaly tests the status of the SAP Manager."
UX_MESSAGE " 	      Only use the -o flag at DollarAccess's request."
UX_MESSAGE " 	      This flag automatically switches the -s flag on"
UX_MESSAGE "Details for the different execution modes :"
UX_MESSAGE "	 -d : Will divide the trace results in 3 packages instead of one package"
UX_MESSAGE "		To facilitate sending the results by e-mail"
UX_MESSAGE "Prerequisites"
UX_MESSAGE "	It is recommended to copy the uxtracesapmgr procedure into the xxx/mgr directory of the "
UX_MESSAGE "	SAP Manager you want to trace"
UX_MESSAGE "	If the trace procedure is not located there, the SAP Manager environment must be loaded"
UX_MESSAGE "	for the manager you want to trace."
}


# ----------------------------------------------- #
# Create a time stamp trace for time optimization
# ----------------------------------------------- #
UX_TIME_STAMP ()
{
loc_output="$1"
loc_message="$2"
loc_function="$3"
ux_time=`date +%Y%m%d-%H%M%S`
UX_MESSAGE "#TSP# ${loc_message} ${ux_time} ${loc_function}" >> ${loc_output} 2>&1
}

# ----------------------------------------------- #
# Check and launch a command
# ----------------------------------------------- #
UX_CMD ()
{
[ ${UXTRACEMODEX:-OFF} = ON ] && set -x ; [ ${UXTRACEMODEV:-OFF} = ON ] && set -v

loc_path="$1" #npth if the command is not specified with an absolute path
loc_command="$2"
loc_output_file="$3"
loc_time_stamp="$4" #tspn for no time stamp, everything else for a time stamp


if [ "${loc_path:-npth}" = "npth" ]; then
	loc_command_to_test=`echo ${loc_command} | cut -d" " -f1`
	which ${loc_command_to_test} > /dev/null 2>&1
	if [ $? -eq 0 ]; then
		[ ${loc_time_stamp:-tsp} = tspn ] || UX_TIME_STAMP ${UXTSPLOG} "#BEG#"
		[ ${loc_time_stamp:-tsp} = tspn ] || UX_MESSAGE "#CMD# ${loc_command}" >> ${UXTSPLOG} 2>&1
		UX_MESSAGE "#CMD# ${loc_command}" >> ${loc_output_file} 2>&1
		[ ${loc_time_stamp:-tsp} = tspn ] || UX_TIME_STAMP ${loc_output_file}
		eval ${loc_command}               >> ${loc_output_file} 2>&1
		loc_return=$?
		[ ${loc_time_stamp:-tsp} = tspn ] || UX_TIME_STAMP ${UXTSPLOG} "#END#"
		return ${loc_return}
	else
		UX_MESSAGE "The command ${loc_command_to_test} is not in the PATH of `id`" 
		UX_MESSAGE "#REM# The command ${loc_command_to_test} is not in the PATH of `id`" >> ${UXTRACELOG}
		UX_MESSAGE "#REM# Value of the PATH : ${PATH}" >> ${UXTRACELOG}
		which ${loc_command_to_test} >> ${UXTRACELOG}
		which ${loc_command_to_test} 
		return 127
	fi
else
	[ ${loc_time_stamp:-tsp} = tspn ] || UX_TIME_STAMP ${UXTSPLOG} "#BEG#"
	[ ${loc_time_stamp:-tsp} = tspn ] || UX_MESSAGE "#CMD# ${loc_path}/${loc_command}" >> ${UXTSPLOG} 2>&1
	UX_MESSAGE "#CMD# ${loc_path}/${loc_command}" >> ${loc_output_file} 2>&1
	[ ${loc_time_stamp:-tsp} = tspn ] || UX_TIME_STAMP ${loc_output_file}
	eval ${loc_path}/${loc_command}               >> ${loc_output_file} 2>&1
	loc_return=$?
	[ ${loc_time_stamp:-tsp} = tspn ] || UX_TIME_STAMP ${UXTSPLOG} "#END#"
	return ${loc_return}
fi
}

# ----------------------------------------------- #
# Check and assign default values to variables
# ----------------------------------------------- #
UX_CHECK_VARIABLES ()
{
# $1 Name of the considered variable
eval ux_contain_value=\$${1}
[ ${ux_contain_value:-nv} = nv ] && eval ${1}=\$${1}DFT
export ${1}
}

# ----------------------------------------------- #
# Create a directory and manage the return code
# ----------------------------------------------- #
UX_CREATE_DIR ()
{
[ ${UXTRACEMODEX:-OFF} = ON ] && set -x ; [ ${UXTRACEMODEV:-OFF} = ON ] && set -v

loc_dir_name="$1"
loc_exit_way="$2"
l_pwd_init=`pwd`

if [ -d ${loc_dir_name} ]; then
	cd ${loc_dir_name}
	l_ret_code=$?
	if [ ${l_ret_code} -ne 0 ]; then
		UX_MESSAGE "The following directory already exists : ${loc_dir_name}"
		UX_MESSAGE "But with incorrect permissions : `ls -ld ${loc_dir_name}`"
		[ ${loc_exit_way:-R} = E ] && exit 2
		[ ${loc_exit_way:-R} = E ] || return 2
	else
		cd ${l_pwd_init}
		return 0
	fi	
else
	mkdir ${loc_dir_name}
	l_ret_code=$?
	if [ ${l_ret_code} -ne 0 ]; then
		UX_MESSAGE "The following directory cannot be created : ${loc_dir_name}"
		UX_MESSAGE "Please check that `dirname ${UXTRACELOCATE}` has the proper permissions and at least 10MB free"
		[ ${loc_exit_way:-R} = E ] && exit 1
		[ ${loc_exit_way:-R} = E ] || return 1  
	else
		return 0
	fi
fi
}

# ----------------------------------------------- #
# Check if the SAP Manager environment is loaded
# or if the uxtracesapmgr script is located in
# the mgr directory of the SAP Manager.
# ----------------------------------------------- #
UX_CHECK_ENV ()
{
UX_MESSAGE "SAP Manager environment verification"
if [ ${UXSAP:-nv} = nv ]; then
	if [ ! -r ./${_UXENVFILE} ] && [ ! -r ${UXTRACEDIRD0}/${_UXENVFILE} ]; then
		UX_MESSAGE "The SAP Manager environment is not loaded"
		UX_MESSAGE "Please load it before launching this script"
		UX_MESSAGE "For more information please type : ${UXTRACECOMPD0} -h"
		exit 1
	else
		UX_MESSAGE "Loading the local ${_UXENVFILE} environment file"
		[ -r ./${_UXENVFILE} ] && . ./${_UXENVFILE}
		[ -r ${UXTRACEDIRD0}/${_UXENVFILE} ] && . ${UXTRACEDIRD0}/${_UXENVFILE}
	fi
else
	UX_MESSAGE "Reloading the ${_UXENVFILE} environment file located in the directory :"
	UX_MESSAGE "	${UXSAP}/mgr"
	. ${UXSAP}/mgr/${_UXENVFILE}
fi
}

# ----------------------------------------------- #
# Check if the user is root
# ----------------------------------------------- #
UX_CHECK_USER ()
{
[ ${UXTRACEMODEX:-OFF} = ON ] && set -x ; [ ${UXTRACEMODEV:-OFF} = ON ] && set -v

loc_check_user=${1}
UX_MESSAGE "#REM# User Verification" >> ${UXTRACELOG}
UX_CMD npth "id" ${UXTRACELOG} tspn

loc_id_root=`id | grep ${loc_check_user}` >> ${UXTRACELOG} 2>&1

if [ "${loc_id_root:-nv}" = "nv" ]; then
	UX_MESSAGE "#-----------------------WARNING------------------------#"
	UX_MESSAGE "It is recommended to launch this procedure with the root user account"
	UX_MESSAGE "to have enough rights to get the required traces"
	UX_MESSAGE "the result of the id command is : "
	id
	UX_MESSAGE ""
	UX_MESSAGE "If you do not have the possibility to get connected with one of these both users"
	UX_MESSAGE "and to relaunch this trace procedure, let the trace procedure complete"
	UX_MESSAGE "and send the result to Dollar Access"
	UX_MESSAGE "But please note that we may not have all the required traces to analyse this issue"
	UX_MESSAGE ""
	UX_MESSAGE "#WAR# User prerequisite not validated" >> ${UXTRACELOG} 2>&1
	uname -a >> ${UXTRACELOG} 2>&1
	UX_MESSAGE "" >> ${UXTRACELOG} 2>&1
	UX_MESSAGE "Waiting 10 seconds before starting to trace"
	sleep 10
fi
}

# ----------------------------------------------- #
# Check the status of the SAP Manager
# ----------------------------------------------- #
UX_CHECK_SAPMGR_OK ()
{
[ ${UXTRACEMODEX:-OFF} = ON ] && set -x ; [ ${UXTRACEMODEV:-OFF} = ON ] && set -v

#####TODO####
#UX_GET_SAPMANAGER_PROCESSES ()
#{
#[ ${UXTRACEMODEX:-OFF} = ON ] && set -x ; [ ${UXTRACEMODEV:-OFF} = ON ] && set -v
#if [ ${UXOS:-nv} = AIX ]; then
#	ps -ef -o "%U %p %P %a" | cut -c 1-2000 | grep -v "grep"
#else
#	ps -ef | cut -c 1-2000 | grep -v "grep"
#fi


UX_MESSAGE "#REM# The result of ps -ef | cut -c 1-2000 | grep ux is :" >> ${UXTRACELOG}
ps -ef | cut -c 1-2000 | grep ux >> ${UXTRACELOG}

ps -ef | cut -c 1-2000 | grep "${UXSAP}/exec/uxagtsap" >> /dev/null
if [ $? -eq 0 ]; then
	UX_MESSAGE "#REM# The SAP Manager seems to be running." >> ${UXTRACELOG}
	manager_running=${manager_running:-yes} #so I don't override the -o option
else
	UX_MESSAGE "#REM# The SAP Manager seems to be down." >> ${UXTRACELOG}
	manager_running=${manager_running:-no} #so I don't override the -o option
fi
}

# ----------------------------------------------- #
# Get SAP Manager Files
# ----------------------------------------------- #
UX_GET_FILES ()
{
[ ${UXTRACEMODEX:-OFF} = ON ] && set -x ; [ ${UXTRACEMODEV:-OFF} = ON ] && set -v

UX_CREATE_DIR ${UXTRACEFILESFOLDER} >> ${UXTRACELOG} 2>&1
[ ! $? -eq 0 ] && return 1

UX_MESSAGE "#REM# Beginning of the copy of the MGR files" >> ${UXTRACELOG}
for ux_file_name in ${UXGETFILESUXMGR}
do
	ls ${UXSAP}/mgr/${ux_file_name} > /dev/null 2>&1
	if [ $? -eq 0 ]; then
		UX_MESSAGE "#CMD# cp -p ${UXSAP}/mgr/${ux_file_name} ${UXTRACEFILESFOLDER}/" >> ${UXTRACELOG}
		cp -p ${UXSAP}/mgr/${ux_file_name} ${UXTRACEFILESFOLDER}/ >> ${UXTRACELOG} 2>&1
	else
		UX_MESSAGE "#REM# The file ${UXSAP}/mgr/${ux_file_name} does not exist" >> ${UXTRACELOG}
	fi
done
cp -p ${UXSAP}/mgr/${_UXENVFILE} ${UXTRACEFILESFOLDER}/ >> ${UXTRACELOG} 2>&1

UX_MESSAGE "#REM# Beginning of the copy of the EXEC files" >> ${UXTRACELOG}
cd ${UXSAP}exec
for ux_file_name in ${UXGETFILESUXEXE}
do
	ls ${UXSAP}/exec/${ux_file_name} > /dev/null 2>&1
	if [ $? -eq 0 ]; then
		UX_MESSAGE "#CMD# cp -p ${UXSAP}/exec/${ux_file_name} ${UXTRACEFILESFOLDER}/" >> ${UXTRACELOG}
		cp -p ${UXSAP}/exec/${ux_file_name} ${UXTRACEFILESFOLDER}/ >> ${UXTRACELOG} 2>&1
	else
		UX_MESSAGE "#REM# The file ${UXSAP}/exec/${ux_file_name} does not exist" >> ${UXTRACELOG}
	fi
done
cd ${UXSAP}mgr
UX_MESSAGE "#REM# Beginning of the copy of the /etc files" >> ${UXTRACELOG}
for ux_file_name in ${UXGETFILESETC}
do
	ls /etc/${ux_file_name} > /dev/null 2>&1
	if [ $? -eq 0 ]; then
		UX_MESSAGE "#CMD# cp -p /etc/${ux_file_name} ${UXTRACEFILESFOLDER}/" >> ${UXTRACELOG}
		cp -p /etc/${ux_file_name} ${UXTRACEFILESFOLDER}/ >> ${UXTRACELOG} 2>&1
	else
		UX_MESSAGE "#REM# The file /etc/${ux_file_name} does not exist" >> ${UXTRACELOG}
	fi
done

UX_MESSAGE "#REM# Beginning of the copy of other system files" >> ${UXTRACELOG}
for ux_file_name in ${UXGETFILESOTHERS}
do
	ls ${ux_file_name} > /dev/null 2>&1
	if [ $? -eq 0 ]; then
		UX_MESSAGE "#CMD# cp -p ${ux_file_name} ${UXTRACEFILESFOLDER}/" >> ${UXTRACELOG}
		cp -p ${ux_file_name} ${UXTRACEFILESFOLDER}/ >> ${UXTRACELOG} 2>&1
	else
		UX_MESSAGE "#REM# The file ${ux_file_name} does not exist" >> ${UXTRACELOG}
	fi
done
UX_MESSAGE "" >> ${UXTRACELOG}

UX_MESSAGE "#REM# Backup of this trace script" >> ${UXTRACELOG}
UX_MESSAGE "#CMD# cp -p ${UXINITIALFOLDER}/${UXTRACEBASD0} ${UXTRACEFILESFOLDER}/" >> ${UXTRACELOG}
cp -p ${UXINITIALFOLDER}/${UXTRACEBASD0} ${UXTRACEFILESFOLDER}/ >> ${UXTRACELOG} 2>&1

if [ -r ${UXCUSTSCRIPT} ]; then
	UX_MESSAGE "#REM# Beginning of the copy of the ${UXCUSTSCRIPT} file" >> ${UXTRACELOG}
	UX_MESSAGE "#CMD# cp -p ${UXCUSTSCRIPT} ${UXTRACEFILESFOLDER}/" >> ${UXTRACELOG}
	cp -p ${UXCUSTSCRIPT} ${UXTRACEFILESFOLDER}/ >> ${UXTRACELOG} 2>&1
else
	UX_MESSAGE "#REM# ${UXCUSTSCRIPT} file does not exist" >> ${UXTRACELOG}
fi
UX_MESSAGE "" >> ${UXTRACELOG}
}

# ----------------------------------------------- #
# List the rights of a folder
# ----------------------------------------------- #
UX_ANALYSE_FOLDER ()
{
[ ${UXTRACEMODEX:-OFF} = ON ] && set -x ; [ ${UXTRACEMODEV:-OFF} = ON ] && set -v

#$1 the path of the folder to analyse
ux_locate=/
ux_field_position=2
until [ `echo ${1} | cut -d / -f ${ux_field_position}`_nv = _nv ]
do
	eval ux_pwd_${ux_field_position}=`echo ${1} | cut -d/ -f ${ux_field_position}`
        eval ux_transfert_value=\${ux_pwd_${ux_field_position}}
	UX_MESSAGE "#REM# Rights of the folder ${ux_locate}${ux_transfert_value}/"
        ux_rights=`ls -l ${ux_locate} | grep ' '${ux_transfert_value}'$' | wc -l `
	if [ ${ux_rights} -eq 0 ]; then
		ls -l ${ux_locate} | grep ' '${ux_transfert_value}' '
	else
		ls -l ${ux_locate} | grep ' '${ux_transfert_value}'$'
	fi
        ux_locate=${ux_locate}${ux_transfert_value}/
        ux_field_position=`expr ${ux_field_position} + 1`
done
}

# ----------------------------------------------- #
# List the rights of all the SAP Manager folders
# ----------------------------------------------- #
UX_RIGHTS_ANALYSIS ()
{
[ ${UXTRACEMODEX:-OFF} = ON ] && set -x ; [ ${UXTRACEMODEV:-OFF} = ON ] && set -v

loc_output_file=$1
UX_MESSAGE "The analysis of the rights of the SAP Manager folders" >> ${loc_output_file}
UX_MESSAGE "" >> ${loc_output_file}
UX_MESSAGE "#REM# Analysis of the / folder" >> ${loc_output_file}
UX_MESSAGE "" >> ${loc_output_file}
ls -al / | grep "\.\."'$' >> ${loc_output_file} 2>&1
UX_MESSAGE "" >> ${loc_output_file}
UX_MESSAGE "#REM# The available place in / is" >> ${loc_output_file}
df -k / >> ${loc_output_file} 2>&1

for ux_folder in ${UXFOLDERALIAS}
do
        if [ ${ux_folder:-nv} != nv ]; then
                UX_MESSAGE "" >> ${loc_output_file}
                UX_MESSAGE "#REM# Analysis of the ${ux_folder} folder" >> ${loc_output_file}
                eval PATHPROG=\$${ux_folder} >> ${loc_output_file} 2>&1
		UX_ANALYSE_FOLDER ${PATHPROG} >> ${loc_output_file} 2>&1
                UX_MESSAGE "" >> ${loc_output_file}
                UX_MESSAGE "#REM# The available space in ${PATHPROG} is" >> ${loc_output_file}
                UX_CMD npth "df -k ${PATHPROG}" ${loc_output_file} tspn
                UX_MESSAGE "" >> ${loc_output_file}
                UX_MESSAGE "#REM# The space required by ${PATHPROG} is" >> ${loc_output_file}
                UX_CMD npth "du -sk ${PATHPROG}" ${loc_output_file} tspn
        fi
done
}


# ----------------------------------------------- #
# Create the analyse.txt file
# ----------------------------------------------- #
UX_CREATE_ANALYZE ()
{
[ ${UXTRACEMODEX:-OFF} = ON ] && set -x ; [ ${UXTRACEMODEV:-OFF} = ON ] && set -v

UX_CMD npth "uname -as" ${ANALYZEFILE} tspn
UX_MESSAGE "" >> ${ANALYZEFILE}

ls /etc/*release > /dev/null 2>&1
if [ $? -eq 0 ]; then
	UX_CMD npth "head -100 /etc/*release" ${ANALYZEFILE} tspn
	UX_MESSAGE "" >> ${ANALYZEFILE}
fi

UX_CMD npth "hostname" ${ANALYZEFILE} tspn
UX_MESSAGE "" >> ${ANALYZEFILE}

UX_CMD "${UXSAP}/exec" "uxversion.ksh" ${ANALYZEFILE} tspn
UX_MESSAGE "" >> ${ANALYZEFILE}

UX_CMD npth "ls -l /etc/UNIVERSE_SAPJCS*" ${ANALYZEFILE} tspn
UX_MESSAGE "" >> ${ANALYZEFILE}

UX_CMD npth "df -k" ${ANALYZEFILE} tspn
UX_MESSAGE "" >> ${ANALYZEFILE}
}

# ----------------------------------------------- #
# Get system traces
# ----------------------------------------------- #
UX_SYS_ANALYZE ()
{
[ ${UXTRACEMODEX:-OFF} = ON ] && set -x ; [ ${UXTRACEMODEV:-OFF} = ON ] && set -v

loc_trace_level=${1}
loc_output_number=${2}
UX_CMD npth "ps -efl | grep ux" ${UXTRACESYSFOLDER}/ps_efl_ux_${loc_output_number}.txt tspn

[ ${loc_trace_level} -ge 3 ] && UX_CMD npth "netstat -a" ${UXTRACESYSFOLDER}/netstat_a_${loc_output_number}.txt tsp
[ ${loc_trace_level} -ge 3 ] && UX_CMD npth "netstat -na" ${UXTRACESYSFOLDER}/netstat_na_${loc_output_number}.txt tsp
[ ${loc_trace_level} -ge 2 ] && UX_CMD npth "ps -ef" ${UXTRACESYSFOLDER}/ps_ef_${loc_output_number}.txt tsp
[ ${loc_trace_level} -ge 2 ] && UX_CMD npth "df -k" ${UXTRACESYSFOLDER}/df_k_${loc_output_number}.txt tsp
[ ${loc_trace_level} -ge 2 ] && UX_CMD npth "ps -ef | grep ux" ${UXTRACESYSFOLDER}/ps_ef_ux_${loc_output_number}.txt tsp
[ ${loc_trace_level} -ge 2 ] && UX_CMD npth "ps -efl" ${UXTRACESYSFOLDER}/ps_efl_${loc_output_number}.txt tsp
[ ${loc_trace_level} -ge 2 ] &&	UX_CMD npth "vmstat 1 5" ${UXTRACESYSFOLDER}/vmstat_${loc_output_number}.txt tsp
# v 2.6.1 ZWA 
if [ ${loc_trace_level} -ge 3 ]; then
	HostName=`grep $S_NOEUD ${UXSAP}/mgr/uxsrsrv.sck|grep -v '^#'|tr -s ' ' ' '|grep -v '^ #'|sed 's/$/:/g'`
	host_list=`echo $HostName |cut -f1 -d':'|sed 's/^ //g'`
	#unused ind=1
	for host_ in $host_list ; do
		#unused if [ $ind -ge 1 ] ; then
			case ${UXOS:-nv} in
				AIX )
					UX_CMD npth "ping $host_ -n 4"  ${UXTRACESYSFOLDER}/ping_localnode_${loc_output_number}.txt tspn
					UX_CMD npth "ping localhost -n 4"  ${UXTRACESYSFOLDER}/ping_localhost_${loc_output_number}.txt tspn
				;;
				SunOS )
					UX_CMD npth " ping -s $host_ 1024 4"  ${UXTRACESYSFOLDER}/ping_localnode_${loc_output_number}.txt tspn
					UX_CMD npth " ping -s localhost 1024 4"  ${UXTRACESYSFOLDER}/ping_localhost_${loc_output_number}.txt tspn
				;;
				HP-UX )
					UX_CMD npth "ping $host_ -n 4"  ${UXTRACESYSFOLDER}/ping_localnode_${loc_output_number}.txt tspn
					UX_CMD npth "ping localhost -n 4"  ${UXTRACESYSFOLDER}/ping_localhost_${loc_output_number}.txt tspn
				;;
				Linux )
					#echo "ping $host_ -c4" >> ${UXTRACESYSFOLDER}/ping_localhost.txt  2>&1
					#UX_CMD npth "ping $host_ -c4"  >> ${UXTRACESYSFOLDER}/ping_localhost.txt  2>&1
					UX_CMD npth "ping $host_ -c 4"  ${UXTRACESYSFOLDER}/ping_localnode_${loc_output_number}.txt tspn
					UX_CMD npth "ping localhost -c 4"  ${UXTRACESYSFOLDER}/ping_localhost_${loc_output_number}.txt tspn
				;;
				* )
					#/usr/sbin/ping  -c 4 frsddec01.orsypgroup.com; for DecUnix, True64
					UX_CMD npth "ping -c 4 $host_ "  ${UXTRACESYSFOLDER}/ping_localnode_${loc_output_number}.txt tspn
					UX_CMD npth "ping -c 4 localhost "  ${UXTRACESYSFOLDER}/ping_localhost_${loc_output_number}.txt tspn
				;;
			esac
		#unused fi
		#unused ind=`expr $ind + 1`
	done
	
fi
# ^ 2.6.1 ZWA 
if [ ${loc_trace_level} -ge 3 ]; then
	case ${UXOS:-nv} in
		AIX )
			UX_CMD npth "ps -ef -o \"%U %p %P %a\" | cut -c 1-2000 | sed 's/ *$//'" ${UXTRACESYSFOLDER}/ps_ef_aix_${loc_output_number}.txt tspn
			UX_CMD npth "ps -ef -o \"%U %p %P %a\" | cut -c 1-2000 | grep ux | sed 's/ *$//'" ${UXTRACESYSFOLDER}/ps_ef_aix_ux_${loc_output_number}.txt tspn
			UX_CMD npth "top -bud3" ${UXTRACESYSFOLDER}/top_bud3_${loc_output_number}.txt tspn
		;;
		SunOS )
			UX_CMD "/usr/proc/bin" "ptree" ${UXTRACESYSFOLDER}/ptree_${loc_output_number}.txt tspn
			UX_CMD npth "top -bud3" ${UXTRACESYSFOLDER}/top_bud3_${loc_output_number}.txt tspn
		;;
		HP-UX )
			UX_CMD npth "top -d3 -n40 -f ${UXTRACESYSFOLDER}/top_bud3_${loc_output_number}.txt" ${UXTRACESYSFOLDER}/.err_top_bud3_${loc_output_number}.txt tspn
		;;
		Linux )
			UX_CMD npth "ps -efw" ${UXTRACESYSFOLDER}/ps_efw_${loc_output_number}.txt tspn
			UX_CMD npth "ps -efw | grep ux" ${UXTRACESYSFOLDER}/ps_efw_ux_${loc_output_number}.txt tspn
			UX_CMD npth "ps -efHwl" ${UXTRACESYSFOLDER}/ps_efwHl_${loc_output_number}.txt tspn
			UX_CMD npth "ps -efHwl | grep ux" ${UXTRACESYSFOLDER}/ps_efwHl_ux_${loc_output_number}.txt tspn
			UX_CMD npth "pstree -ap" ${UXTRACESYSFOLDER}/pstree_ap_${loc_output_number}.txt tspn
			UX_CMD npth "top -bn3" ${UXTRACESYSFOLDER}/top_bud3_${loc_output_number}.txt tspn
			UX_CMD npth "netstat -aeep" ${UXTRACESYSFOLDER}/netstat_aeep_${loc_output_number}.txt tspn
		;;
		* )
			UX_CMD npth "top -bn3" ${UXTRACESYSFOLDER}/top_bud3_${loc_output_number}.txt tspn
		;;
	esac
fi
if [ ${loc_trace_level} -ge 9 ]; then
	UX_CMD npth "ipcs -ma"  ${UXTRACESYSFOLDER}/shared_memory.txt tspn
	UX_CMD npth "env" ${UXTRACESYSFOLDER}/env.txt tspn

	which uptime > /dev/null 2>&1 && UX_CMD npth "uptime" ${UXTRACESYSFOLDER}/uxgetcpu.txt tsp
	UX_CMD npth "netstat -i" ${UXTRACESYSFOLDER}/netstat_i.txt tspn
	UX_CMD npth "ypcat services" ${UXTRACESYSFOLDER}/nis_ypcat_services.txt tspn
	UX_CMD npth "ypcat passwd" ${UXTRACESYSFOLDER}/nis_ypcat_passwd.txt tspn
	UX_CMD npth "ypcat group" ${UXTRACESYSFOLDER}/nis_ypcat_group.txt tspn
	UX_CMD npth "ypcat hosts" ${UXTRACESYSFOLDER}/nis_ypcat_hosts.txt tspn
	UX_CMD npth "ypcat networks" ${UXTRACESYSFOLDER}/nis_ypcat_networks.txt tspn
	UX_CMD npth "ypcat protocols" ${UXTRACESYSFOLDER}/nis_ypcat_protocols.txt tspn
	UX_CMD npth "who -b " ${UXTRACESYSFOLDER}/who_b.txt tspn 
fi
}

# ----------------------------------------------- #
# Takes several snapshots of the system
#  $1 : Starting number
#  $2 : Ending Number
#  $3 : sleeping time between each loop
# ----------------------------------------------- #
UX_LOOP_SYSTEM_TRACES ()
{
[ ${UXTRACEMODEX:-OFF} = ON ] && set -x ; [ ${UXTRACEMODEV:-OFF} = ON ] && set -v

ux_numb_beg=$1
ux_loop_number=$2
ux_sleep=$3
ux_numb_end=`expr ${ux_numb_beg} + ${ux_loop_number}`
UX_MESSAGE "Taking ${ux_loop_number} brief snapshots of the system with a ${ux_sleep} second interval"
ux_numb=`expr ${ux_numb_beg} + 1`
until [ ${ux_numb} -ge ${ux_numb_end} ]
do
	[ ${ux_numb} -le 9 ] && UX_SYS_ANALYZE 1 0${ux_numb}
	[ ! ${ux_numb} -le 9 ] && UX_SYS_ANALYZE 1 ${ux_numb}
	[ ! ${ux_numb} -eq ${ux_numb_end} ] && UX_MESSAGE "	Waiting ${ux_sleep} seconds"
	[ ! ${ux_numb} -eq ${ux_numb_end} ] && sleep ${ux_sleep}
	ux_numb=`expr ${ux_numb} + 1`
done
UX_MESSAGE ""
}

# ----------------------------------------------- #
# Get the listing of the directories
# ----------------------------------------------- #
UX_DIRECTORY_LISTING()
{
[ ${UXTRACEMODEX:-OFF} = ON ] && set -x ; [ ${UXTRACEMODEV:-OFF} = ON ] && set -v

#Unused for the moment
#for ux_folder_alias in ${UXCONFFOLDERALIAS}
#do
#	eval ux_transfert_value=\$${ux_folder_alias}
#	loc_output=${UXTRACEDLSFOLDER}/${ux_folder_alias}_ls_ltrai.txt
#	UX_MESSAGE "#REM# LISTING OF THE SAP MANAGER ${ux_folder_alias} DIRECTORY (Sorted by time stamp)" >> ${loc_output}
#	UX_CMD npth "ls -ltrai ${ux_transfert_value}" ${loc_output} tspn
#	loc_output=${UXTRACEDLSFOLDER}/${ux_folder_alias}_ls_lai.txt
#	UX_MESSAGE "#REM# LISTING OF THE SAP MANAGER ${ux_folder_alias} DIRECTORY (Sorted by name)" >> ${loc_output}
#	UX_CMD npth "ls -lai ${ux_transfert_value}" ${loc_output} tspn
#	loc_output=${UXTRACEDLSFOLDER}/${ux_folder_alias}_ls_lRai.txt
#	UX_MESSAGE "#REM# RECURSIVE LISTING OF THE SAP MANAGER ${ux_folder_alias} DIRECTORY (Sorted by name)" >> ${loc_output}
#	UX_CMD npth "ls -lRai ${ux_transfert_value}" ${loc_output} tspn
#done

for ux_folder_alias in ${UXDATAFOLDERALIAS}
do
	eval ux_transfert_value=\$${ux_folder_alias}
	loc_output=${UXTRACEDLSFOLDER}/${ux_folder_alias}_ls_ltrai.txt
	UX_MESSAGE "#REM# LISTING OF THE SAP MANAGER ${ux_folder_alias} DIRECTORY (Sorted by time stamp)" >> ${loc_output}
	UX_CMD npth "ls -ltrai ${ux_transfert_value}" ${loc_output} tspn
	loc_output=${UXTRACEDLSFOLDER}/${ux_folder_alias}_ls_ltraiL.txt
	UX_MESSAGE "#REM# LISTING OF THE SAP MANAGER ${ux_folder_alias} DIRECTORY (following symbolic links and sorted by time stamp)" >> ${loc_output}
	UX_CMD npth "ls -ltraiL ${ux_transfert_value}" ${loc_output} tspn
done
}

#TODO: adapt the following for the file grab procedure..... pas si utile...
# ----------------------------------------------- #
# Check the status of the Dollar Universe Company
# ----------------------------------------------- #
#UX_CHECK_COMPANY_OK ()
#{
#[ ${UXTRACEMODEX:-OFF} = ON ] && set -x ; [ ${UXTRACEMODEV:-OFF} = ON ] && set -v
#
#loc_off_flag=${1:-off}
#loc_comp_status=`UX_CHECK_COMPANY X`
#tmp_atm_log=/tmp/tmp_atm_log
#if [ ${loc_comp_status:-OFF} = ON ]; then
#	UX_BG_CMD "${UXEXE}/uxlst atm" ${tmp_atm_log} ${UXBGTIMEOUT} >> ${UXTRACELOG} 2>&1
#	loc_comp_test=$?
#	cat ${tmp_atm_log} >> ${UXTRACELOG} 
#else
#        UX_MESSAGE "#REM# The Company was shutdowned" >> ${UXTRACELOG}
#	UX_MESSAGE "#REM# The result of ps -ef | cut -c 1-2000 | grep ux is :" >> ${UXTRACELOG}
#	ps -ef | cut -c 1-2000 | grep ux >> ${UXTRACELOG}
#	loc_comp_test=2
#fi
#if [ ${loc_comp_test} -eq 0 ]; then
#	grep Launcher ${tmp_atm_log} > /dev/null 2>&1
#	loc_comp_test=$?
#	if [ ${loc_comp_test} -eq 0 ]; then
#		if [ ${loc_off_flag} = on ]; then
#			UX_MESSAGE "The -o option has been used but the Dollar Universe seems to react"
#			UX_MESSAGE "If you have sometime you can relaunch the ${UXTRACEBASD0} trace procedure without"
#			UX_MESSAGE "the -o parameter"
#			UX_MESSAGE "#REM# The -o option has been used but the Dollar Universe seems to react" >> ${UXTRACELOG}
#			UX_MESSAGE "#REM# If you have sometime you can relaunch the ${UXTRACEBASD0} trace procedure without" >> ${UXTRACELOG}
#			UX_MESSAGE "#REM# the -o parameter" >> ${UXTRACELOG}
#			return 1
#		fi
#		return 0
#	fi
#else
#        UX_MESSAGE "The Company will be considered as shutdowned"
#        UX_MESSAGE "#REM# The Company will be considered as shutdowned" >> ${UXTRACELOG}
#        UX_MESSAGE "#REM# The uxlst atm command did not complete in 20 seconds" >> ${UXTRACELOG}
#	return 2
#fi
#}

# ----------------------------------------------- #
# Taz the Folder
# ----------------------------------------------- #
UX_COMPRESS_FOLDER ()
{
[ ${UXTRACEMODEX:-OFF} = ON ] && set -x ; [ ${UXTRACEMODEV:-OFF} = ON ] && set -v

loc_comp_folder_locate="${1:-nv}"
loc_comp_folder_name="${2:-nv}"
loc_comp_compress_package=${3:-Y}
loc_comp_keep_folder=${4:-N}
if [ -d ${loc_comp_folder_locate}/${loc_comp_folder_name} ]; then
	cd ${loc_comp_folder_locate}
	chmod -R u+rw,g+rw,o+rw ./${loc_comp_folder_name}
	tar -cf  ./${loc_comp_folder_name}.tar ./${loc_comp_folder_name}
	chmod u+rw,g+rw,o+rw ./${loc_comp_folder_name}.tar
else
	UX_MESSAGE "The ${loc_comp_folder_locate}/${loc_comp_folder_name} folder does not exist"
	return 1
fi
if [ ${loc_comp_compress_package} = Y ]; then
	which compress  > /dev/null 2>&1 && loc_compress=OK
	which gzip      > /dev/null 2>&1 && loc_gzip=OK
	if [ ${loc_gzip:-KO} = OK ]; then
		gzip ${loc_comp_folder_locate}/${loc_comp_folder_name}.tar
		loc_extension=tar.gz
	elif [ ${loc_compress:-KO} = OK ]; then
		compress ${loc_comp_folder_locate}/${loc_comp_folder_name}.tar
		if [ $? -eq 2 ]; then
			loc_extension=tar
		else
			mv ${loc_comp_folder_locate}/${loc_comp_folder_name}.tar.Z ${loc_comp_folder_locate}/${loc_comp_folder_name}.taz
			loc_extension=taz
		fi
	else
		loc_extension=tar
	fi
else
	loc_extension=tar
fi
UX_MESSAGE "The file ${loc_comp_folder_locate}/${loc_comp_folder_name}.${loc_extension} has been created"
loc_size=`du -sk ${loc_comp_folder_locate}/${loc_comp_folder_name}.${loc_extension} | cut -f1 2>> ${UXTRACELOG}`
UX_MESSAGE "It's size in Kb is : ${loc_size}"
UX_MESSAGE ""
chmod u+rw,g+rw,o+rw ${loc_comp_folder_locate}/${loc_comp_folder_name}.${loc_extension}
if [ ${loc_comp_keep_folder} = N ]; then
	rm -rf ${loc_comp_folder_locate}/${loc_comp_folder_name}
else
	UX_MESSAGE "The folder ${loc_comp_folder_locate}/${loc_comp_folder_name} has not been deleted"
fi
}

#unused, but could be useful at some point in time
# ----------------------------------------------- #
# UX_CREATE_ALL_INFO
# ----------------------------------------------- #
#UX_CREATE_ALL_INFO ()
#{
#[ ${UXTRACEMODEX:-OFF} = ON ] && set -x ; [ ${UXTRACEMODEV:-OFF} = ON ] && set -v
#
#cat ${ANALYZEFILE} > ${g_ai_file} 2>&1
#UX_MESSAGE "" >> ${g_ai_file} 2>&1
#UX_MESSAGE "#REM# More information can be found in the DLS subdirectory" >> ${g_ai_file} 2>&1
#UX_MESSAGE "" >> ${g_ai_file} 2>&1
#cat ${UXTRACESYSFOLDER}/shared_memory.txt >> ${g_ai_file} 2>&1
#cat ${UXTRACEDLSFOLDER}/base_sys_lst.txt >> ${g_ai_file} 2>&1
#cat ${UXTRACEDLSFOLDER}/UXMGR_ls_lai.txt >> ${g_ai_file} 2>&1
#cat ${UXTRACEDLSFOLDER}/UXEXE_ls_lai.txt >> ${g_ai_file} 2>&1
#cat ${UXTRACEDLSFOLDER}/UXLIB_ls_lai.txt >> ${g_ai_file} 2>&1
#UX_MESSAGE "" >> ${g_ai_file} 2>&1
#UX_MESSAGE "#REM# More information can be found in the DQM subdirectory" >> ${g_ai_file} 2>&1
#UX_MESSAGE "" >> ${g_ai_file} 2>&1
#cat ${UXTRACEDQMFOLDER}/DQM_all_ls_ltrai.txt >> ${g_ai_file} 2>&1
#UX_MESSAGE "" >> ${g_ai_file} 2>&1
#UX_MESSAGE "#REM# More information can be found in the SAP and RFC subdirectories" >> ${g_ai_file} 2>&1
#UX_MESSAGE "" >> ${g_ai_file} 2>&1
#[ -f ${loc_sap_output} ] && cat ${loc_sap_output} >> ${g_ai_file} 2>&1
#[ -f ${loc_sap_output} ] || UX_MESSAGE "#REM# SAP not configured" >> ${g_ai_file} 2>&1
#[ -f ${loc_rfc_output} ] && cat ${loc_rfc_output} >> ${g_ai_file} 2>&1
#[ -f ${loc_rfc_output} ] || UX_MESSAGE "#REM# SAP not configured" >> ${g_ai_file} 2>&1
#UX_MESSAGE "" >> ${g_ai_file} 2>&1
#UX_MESSAGE "#REM# More information can be found in the DLS subdirectory" >> ${g_ai_file} 2>&1
#UX_MESSAGE "" >> ${g_ai_file} 2>&1
#cat ${UXTRACEDLSFOLDER}/DQM_all_ls_ltrai.txt >> ${g_ai_file} 2>&1
#cat ${UXTRACEDLSFOLDER}/UXDIR_ROOT_ls_ltrai_01G.txt >> ${g_ai_file} 2>&1
#UX_MESSAGE "" >> ${g_ai_file} 2>&1
#cat ${UXTRACEDLSFOLDER}/UXDEX_ls_ltrai_01G.txt >> ${g_ai_file} 2>&1
#cat ${UXTRACEDLSFOLDER}/UXDSI_ls_ltrai_01G.txt >> ${g_ai_file} 2>&1
#cat ${UXTRACEDLSFOLDER}/UXDIN_ls_ltrai_01G.txt >> ${g_ai_file} 2>&1
#cat ${UXTRACEDLSFOLDER}/UXDAP_ls_ltrai_01G.txt >> ${g_ai_file} 2>&1
#UX_MESSAGE "" >> ${g_ai_file} 2>&1
#cat ${UXTRACEDLSFOLDER}/UXPEX_ls_ltrai.txt >> ${g_ai_file} 2>&1
#cat ${UXTRACEDLSFOLDER}/UXPSI_ls_ltrai.txt >> ${g_ai_file} 2>&1
#cat ${UXTRACEDLSFOLDER}/UXPIN_ls_ltrai.txt >> ${g_ai_file} 2>&1
#cat ${UXTRACEDLSFOLDER}/UXPAP_ls_ltrai.txt >> ${g_ai_file} 2>&1
#UX_MESSAGE "" >> ${g_ai_file} 2>&1
#cat ${UXTRACEDLSFOLDER}/UXLEX_ls_ltrai.txt >> ${g_ai_file} 2>&1
#cat ${UXTRACEDLSFOLDER}/UXLEX_ls_ltrai.txt >> ${g_ai_file} 2>&1
#cat ${UXTRACEDLSFOLDER}/UXLIN_ls_ltrai.txt >> ${g_ai_file} 2>&1
#cat ${UXTRACEDLSFOLDER}/UXLAP_ls_ltrai.txt >> ${g_ai_file} 2>&1
#UX_MESSAGE "" >> ${g_ai_file} 2>&1
#cat ${UXTRACEDLSFOLDER}/U_TMP_PATH_ls_ltrai.txt >> ${g_ai_file} 2>&1
#UX_MESSAGE "" >> ${g_ai_file} 2>&1
#cat ${UXTRACEDLSFOLDER}/du_dir_analysis.txt >> ${g_ai_file} 2>&1
#UX_MESSAGE "" >> ${g_ai_file} 2>&1
#UX_MESSAGE "#REM# More information can be found in the SYS subdirectory" >> ${g_ai_file} 2>&1
#UX_MESSAGE "" >> ${g_ai_file} 2>&1
#cat ${UXTRACESYSFOLDER}/env.txt >> ${g_ai_file} 2>&1
#cat ${UXTRACESYSFOLDER}/ps_ef_01G.txt >> ${g_ai_file} 2>&1
#cat ${UXTRACESYSFOLDER}/netstat_a_01G.txt >> ${g_ai_file} 2>&1
#cat ${UXTRACESYSFOLDER}/netstat_na_01G.txt >> ${g_ai_file} 2>&1
#}


# ----------------------------------------------- #
# UX_PACKAGE_FOLDER
# ----------------------------------------------- #
UX_PACKAGE_FOLDER ()
{
[ ${UXTRACEMODEX:-OFF} = ON ] && set -x ; [ ${UXTRACEMODEV:-OFF} = ON ] && set -v
loc_folder_locate="${1:-nv}"
loc_folder_name="${2:-nv}"
loc_compress_package=${3:-Y}
loc_keep_folder=${4:-N}
loc_dividing_level=${5:-0}
if [ ${loc_dividing_level} -ge 5 ]; then
	UX_CREATE_DIR ${UXTRACEFOLDER2} >> ${UXTRACELOG} 2>&1
	UX_CMD npth "mv ${UXTRACELOGFOLDER}/UX*taz ${UXTRACEFOLDER2}" ${UXTRACELOG}
	UX_COMPRESS_FOLDER ${loc_folder_locate} ${UXTRACENAME2} ${loc_compress_package} ${loc_keep_folder}
	[ ${file_flag:-off} = on ] && UX_COMPRESS_FOLDER ${loc_folder_locate} ${UXTRACENAME4} ${loc_compress_package} ${loc_keep_folder}
fi
if [ ${loc_dividing_level} -ge 10 ]; then
	UX_COMPRESS_FOLDER ${loc_folder_locate} ${UXTRACENAME3} ${loc_compress_package} ${loc_keep_folder}
fi
UX_COMPRESS_FOLDER ${loc_folder_locate} ${loc_folder_name} ${loc_compress_package} ${loc_keep_folder}
}

# ----------------------------------------------- #
# Customized script submission
# ----------------------------------------------- #
UX_CUST_SCRIPT ()
{
loc_cust_script=${1}
loc_sub_mode=${2:-s}
# s for a sourcing
# k for ksh's execution
# d for detection
loc_which_script=${3}
[ ${loc_which_script:-no_value} = no_value ] || loc_cust_script=${loc_cust_script}_${loc_which_script}
case ${loc_sub_mode} in
	d )
	  if [ -r ${loc_cust_script} ]; then
	  	UX_MESSAGE "The ${loc_cust_script} script will be submitted at the end of the uxtrace."
	  else
	  	UX_MESSAGE "The ${loc_cust_script} script will not be submitted"
	  	UX_MESSAGE "#REM# The ${loc_cust_script} is not present or readable" >> ${UXTRACELOG}
		UX_CMD npth "ls -l ${loc_cust_script}" ${UXTRACELOG}
		[ ${loc_which_script:-no_value} = no_value ] && cust_std_flag=off
		[ ! ${loc_which_script:-no_value} = no_value ] && cust_flag=off
	  fi
	  ;;
	s )
	  if [ -r ${loc_cust_script} ]; then
	        UX_MESSAGE "#REM# Copy of the ${loc_cust_script} script" >> ${UXTRACELOG}
	        UX_MESSAGE "#CMD# cp ${loc_cust_script} ${UXTRACEFILESFOLDER} >> ${UXTRACELOG} 2>&1" >> ${UXTRACELOG}
        	UX_MESSAGE "Sourcing the ${loc_cust_script} script"
	        UX_MESSAGE "#REM# Sourcing the ${loc_cust_script} script" >> ${UXTRACELOG}
	        UX_MESSAGE ". ${loc_cust_script} >> \${UXTRACELOG} 2>&1"

	        UX_MESSAGE "#CMD# . ${loc_cust_script} >> ${UXTRACELOG} 2>&1" >> ${UXTRACELOG}
		. ${loc_cust_script} >> ${UXTRACELOG} 2>&1
	  else
	  	UX_MESSAGE "The ${loc_cust_script} script will not be submitted"
	  	UX_MESSAGE "#REM# The ${loc_cust_script} is not present or readable" >> ${UXTRACELOG}
		UX_CMD npth "ls -l ${loc_cust_script}" ${UXTRACELOG}
	  fi
	  ;;
	k )
	  if [ -x ${loc_cust_script} ]; then
	        UX_MESSAGE "#REM# Copy of the ${loc_cust_script} script" >> ${UXTRACELOG}
	        UX_MESSAGE "#CMD# cp ${loc_cust_script} ${UXTRACEFILESFOLDER} >> ${UXTRACELOG} 2>&1" >> ${UXTRACELOG}
        	UX_MESSAGE "Launching the ${loc_cust_script} script"
	        UX_MESSAGE "#REM# Launching the ${loc_cust_script} script" >> ${UXTRACELOG}
	        UX_MESSAGE "ksh ${loc_cust_script} >> \${UXTRACELOG} 2>&1"
	        UX_MESSAGE "#CMD# ksh ${loc_cust_script} >> ${UXTRACELOG} 2>&1" >> ${UXTRACELOG}
		ksh ${loc_cust_script} >> ${UXTRACELOG} 2>&1
	  else
	  	UX_MESSAGE "The ${loc_cust_script} script will not be submitted"
	  	UX_MESSAGE "#REM# The ${loc_cust_script} is not executable" >> ${UXTRACELOG}
		UX_CMD npth "ls -l ${loc_cust_script}" ${UXTRACELOG}
	  fi
	  ;;
	* )
	  return 1
	  ;;
esac
}

# ----------------------------------------------- #
# Retrieve the information for {evt,jnl,hst} files
# ----------------------------------------------- #
UX_GET_JOURNALS ()
{
[ ${UXTRACEMODEX:-OFF} = ON ] && set -x ; [ ${UXTRACEMODEV:-OFF} = ON ] && set -v

if [ ${manager_running:-yes} = no ]; then
	UXGETFILESOTHERS="${UXGETFILESOTHERS} ${UXSAP_JNL_FILE} ${UXSAP_HST_FILE} ${UXSAP_EVT_FILE}"
else
	UX_CMD "${UXSAP}/exec" "uxevtfile LIST" "${UXTRACEFILESFOLDER}/uxevtfile.cmdlist" tspn
	UX_CMD "${UXSAP}/exec" "uxjnlfile LIST" "${UXTRACEFILESFOLDER}/uxjnlfile.cmdlist" tspn
	UX_CMD "${UXSAP}/exec" "uxhstfile LIST" "${UXTRACEFILESFOLDER}/uxhstfile.cmdlist" tspn

	UX_MESSAGE "#CMD# ${UXSAP}/exec/uxevtfile LIST" >> ${UXTRACELOG}
	UX_MESSAGE "#CMD# ${UXSAP}/exec/uxjnlfile LIST" >> ${UXTRACELOG}
	UX_MESSAGE "#CMD# ${UXSAP}/exec/uxhstfile LIST" >> ${UXTRACELOG}
fi
}

##########################################################
#                    MAIN                                #
##########################################################
[ ${UXTRACEMODEX:-OFF} = ON ] && set -x ; [ ${UXTRACEMODEV:-OFF} = ON ] && set -v

#Options management
ux_option_list=""
tracemode_flag=off
while getopts sPodtp:h: option 
do
	case "${option}" in
		s )
		  system_flag=on
		  ux_option_list=${ux_option_list}s
		  tracemode_flag=on
		  ;;
		p )
		  cust_flag=on
		  ux_which_script=${OPTARG}
		  ux_option_list=${ux_option_list}p
		  tracemode_flag=on
		  ;;
		P )
		  cust_std_flag=off
		  #TODO: shouldn't take an argument    ux_which_script=${OPTARG}
		  ux_option_list=${ux_option_list}P
		  ;;
		o )
		  system_flag=on
		  manager_running=no
		  ux_option_list=${ux_option_list}o
		  UX_MESSAGE "WARNING! Overriding manager auto-detection. Data corruption could occur."
		  ;;
		d )
		  divide_flag=on
		  ux_option_list=${ux_option_list}d
		  ;;
		t )
		  dev_flag=on
		  UX_MESSAGE "Enabling DEVELOPMENT mode!"
		  ;;
		h )
		  if [ "${OPTARG}nv" = "nv" ]; then
			HELP 0
		  else
			HELP 1
		  fi
		  exit 0
		  ;;
		*)
		  HELP 0
		  exit 1
		  ;;
	esac
done 2> /dev/null

UX_MESSAGE "# ----------------------------------------------- #"
UX_MESSAGE "#       uxtracesapmgr version : ${UXTRACEVERSION}"
UX_MESSAGE "# ----------------------------------------------- #"
UX_MESSAGE ""
UX_CHECK_ENV

# Default values
UXTRACELOCATEDFT=/tmp
UXKEEPUXTRACEFOLDERDFT=N
UXCOMPRESSUXTRACEFOLDERDFT=Y
UXCUSTSCRIPTDFT=${UXMGR}/uxtrace_cust
UXLAUNCHCUSTSCRIPTDFT=s


UX_MESSAGE ""
# Flag Impact management 

# If no trace flag has been used, assume no system verifs
# Not really used now because there is only a system mode
if [ ${tracemode_flag:-off} = off ]; then
	system_flag=off
	ux_option_list=s${ux_option_list}
fi

# if the -s (sys tests) option is chosen
[ ${system_flag:-off} = on ] && UXSLEEPTIMEDFT=15
[ ${system_flag:-off} = on ] && UXLOOPNUMBERDFT=4
[ ${system_flag:-off} = on ] || UXSLEEPTIMEDFT=30
[ ${system_flag:-off} = on ] || UXLOOPNUMBERDFT=2

# if the _t (devel) option is chosen
[ ${dev_flag:-off} = on ] && UXSLEEPTIMEDFT=1
[ ${dev_flag:-off} = on ] && UXLOOPNUMBERDFT=1

# Internal variables related to directories and filenames used for the trace
UX_CHECK_VARIABLES UXTRACELOCATE
if [ ! ${divide_flag:-off} = on ]; then
	UXTRACENAME=TMP_${S_NOEUD}_uxtracesapmgr_${UXOS}_${UXTRACEDATE}_${ux_option_list}
else
	UXTRACENAME=TMP_${S_NOEUD}_uxtracesapmgr_${UXOS}_${UXTRACEDATE}_prt1_${ux_option_list}
	UXTRACENAME2=TMP_${S_NOEUD}_uxtracesapmgr_${UXOS}_${UXTRACEDATE}_prt2_${ux_option_list}
	UXTRACEFOLDER2=${UXTRACELOCATE}/${UXTRACENAME2}
	UXTRACENAME3=TMP_${S_NOEUD}_uxtracesapmgr_${UXOS}_${UXTRACEDATE}_prt3_${ux_option_list}
	UXTRACEFOLDER3=${UXTRACELOCATE}/${UXTRACENAME3}
	UXTRACECUSTFOLDER=${UXTRACEFOLDER3}
	UXTRACENAME4=TMP_${S_NOEUD}_uxtracesapmgr_${UXOS}_${UXTRACEDATE}_prt4_${ux_option_list}
	UXTRACEFOLDER4=${UXTRACELOCATE}/${UXTRACENAME4}
	UXTRACEDUFILESFOLDER=${UXTRACEFOLDER4}
	ux_packaging_level=5
fi

UXTRACEFOLDER=${UXTRACELOCATE}/${UXTRACENAME}
UXTRACELOG=${UXTRACEFOLDER}/uxtracesapmgr.txt
UXTSPLOG=${UXTRACEFOLDER}/timestamp.txt
UXTRACESYSFOLDER=${UXTRACEFOLDER}/SYS
UXTRACEDLSFOLDER=${UXTRACEFOLDER}/DLS
UXTRACEFILESFOLDER=${UXTRACEFOLDER}/FILES
ANALYZEFILE=${UXTRACEFOLDER}/analyse.txt
#unused g_ai_file=${UXTRACEFOLDER}/all_info.txt


[ ! ${divide_flag:-off} = on ] && UXTRACECUSTFOLDER=${UXTRACEFOLDER}/CUST
export UXTRACECUSTFOLDER

# Master directory creation
UX_MESSAGE "Creating trace directory : ${UXTRACEFOLDER}"
UX_CREATE_DIR ${UXTRACEFOLDER} E
UX_CREATE_DIR ${UXTRACESYSFOLDER} E >> ${UXTRACELOG} 2>&1
UX_CREATE_DIR ${UXTRACEDLSFOLDER} E >> ${UXTRACELOG} 2>&1
UX_TIME_STAMP ${UXTSPLOG} "#BEG#GLOBAL#"

# We want this script to be run as root if possible
UX_MESSAGE "Checking for proper user rights"
UX_CHECK_USER root

UX_MESSAGE "#-----------------------VARIABLES------------------------#"
UX_MESSAGE "" >> ${UXTRACELOG}
UX_MESSAGE "The values of the configuration variables are :"
UX_MESSAGE "The values of the configuration variables are :" >> ${UXTRACELOG}
UX_MESSAGE "" >> ${UXTRACELOG}
UX_MESSAGE "#         uxtrace version : ${UXTRACEVERSION}" >> ${UXTRACELOG}
UX_MESSAGE "" >> ${UXTRACELOG}
for ux_variable_name in UXTRACELOCATE UXCUSTSCRIPT
do
	UX_CHECK_VARIABLES ${ux_variable_name}
	eval ux_value=\$${ux_variable_name}
	UX_MESSAGE "	${ux_variable_name} :		${ux_value}"
	UX_MESSAGE "	${ux_variable_name} :		${ux_value}" >> ${UXTRACELOG}
done
for ux_variable_name in UXKEEPUXTRACEFOLDER UXCOMPRESSUXTRACEFOLDER UXLOOPNUMBER UXSLEEPTIME UXLAUNCHCUSTSCRIPT 
do
	UX_CHECK_VARIABLES ${ux_variable_name}
	eval ux_value=\$${ux_variable_name}
	UX_MESSAGE "	${ux_variable_name} :		${ux_value}"
	UX_MESSAGE "	${ux_variable_name} :		${ux_value}" >> ${UXTRACELOG}
done
UX_MESSAGE ""

# Display version information for this script
UX_MESSAGE "#REM# The version of the launched uxtracesapmgr is ${UXTRACEVERSION}" >> ${UXTRACELOG}

# Display the available disk space in the log directory
UX_MESSAGE "#REM# For information, the space available in ${UXTRACEFOLDER} is :" >> ${UXTRACELOG}
df -k ${UXTRACEFOLDER} >> ${UXTRACELOG} 2>&1
UX_MESSAGE "" >> ${UXTRACELOG}

# Check if the manager is running as it affects some operations
UX_MESSAGE "Verifying if the SAP Manager is in operation"
UX_CHECK_SAPMGR_OK
UX_MESSAGE ""

UX_MESSAGE "#--------CUSTOMIZED SCRIPT DETECTION-------------#"
#TODO [ ${cust_std_flag:-on} = on ] && UX_CUST_SCRIPT ${UXCUSTSCRIPT} d
#TODO [ ${cust_flag:-off} = on ] && UX_CUST_SCRIPT ${UXCUSTSCRIPT} d ${ux_which_script:-no_value}
UX_MESSAGE ""

# Perform basic system analysis
UX_MESSAGE "#----------------STARTING TRACES-----------------#"
UX_MESSAGE "First Global System Screenshot"
UX_SYS_ANALYZE 9 01G
UX_MESSAGE ""

# Dump a listing of the files in SAPMGR and on the system
UX_MESSAGE "Directory analysis"
UX_DIRECTORY_LISTING
UX_RIGHTS_ANALYSIS ${UXTRACEDLSFOLDER}/du_dir_analysis.txt
UX_MESSAGE ""

# The ANALYZEFILE is a summary of some tests
UX_MESSAGE "Creation of the ${ANALYZEFILE} file"
UX_MESSAGE ""
UX_CREATE_ANALYZE

# Retrieve some files and store in a specific directory
UX_MESSAGE "SAP Manager file collect procedure"
UX_MESSAGE ""
UX_GET_FILES

# Grab the evt, jnl and hst files from command or directly
UX_MESSAGE "Retrieving the journal files"
UX_GET_JOURNALS
UX_MESSAGE ""

UX_MESSAGE "Second Global System Screenshot"
UX_MESSAGE ""
UX_SYS_ANALYZE 3 02G

UX_LOOP_SYSTEM_TRACES 10 ${UXLOOPNUMBER} ${UXSLEEPTIME}

UX_MESSAGE "Third Global System Screenshot"
UX_MESSAGE ""
UX_SYS_ANALYZE 3 98G

UX_MESSAGE "Last Global System Screenshot"
UX_MESSAGE ""
UX_SYS_ANALYZE 3 99G
#if [ ${cust_std_flag:-on} = on ] || [ ${cust_flag:-off} = on ]; then
#TODO	UX_CREATE_DIR ${UXTRACECUSTFOLDER} >> ${UXTRACELOG} 2>&1
#fi
#TODO [ ${cust_std_flag:-on} = on ] && UX_CUST_SCRIPT ${UXCUSTSCRIPT} ${UXLAUNCHCUSTSCRIPT}
#TODO [ ${cust_flag:-off} = on ] && UX_MESSAGE ""
#TODO [ ${cust_flag:-off} = on ] && UX_CUST_SCRIPT ${UXCUSTSCRIPT} ${UXLAUNCHCUSTSCRIPT} ${ux_which_script:-no_value}
UX_CMD npth "rmdir ${UXTRACECUSTFOLDER}" ${UXTRACELOG}
[ ! $? -eq 0 ] && [ ${ux_packaging_level:-0} -ge 5 ] && ux_packaging_level=10
#unused UX_CREATE_ALL_INFO

UX_MESSAGE ""
UX_MESSAGE "Packaging the UXTRACE folder"
UX_MESSAGE ""
UX_PACKAGE_FOLDER ${UXTRACELOCATE} ${UXTRACENAME} ${UXCOMPRESSUXTRACEFOLDER} ${UXKEEPUXTRACEFOLDER} ${ux_packaging_level}
