[RUNSTEP1]
LABEL=Updating Services for Dollar Universe
PREREQ=IsDU_FirstInstall ${UXMGR}
CURRENTSTEP=[[ $UNI_CLUSTER_LOGICAL = true ]] || cp -f /etc/services /etc/services_before_UNIVERSE;[[ $UNI_CLUSTER_LOGICAL = true ]] ||cat /etc/services_maj >> /etc/services
POSTSTEP=[[ $UNI_CLUSTER_LOGICAL = true ]] ||NbL=$(cat /etc/services_maj | wc -l);Message "The following ${NbL} lines have been added to /etc/services:";tail -$(echo ${NbL}) /etc/services

[RUNSTEP2]
LABEL=Updating Services for DQM if required
PREREQ=IsDU_FirstInstall ${UXMGR} && [[ ${GO_INSTALL_DQM} = true ]] && [[ $UNI_CLUSTER_LOGICAL = false ]]
CURRENTSTEP=echo "DQM             ${DQM_PORT_NUM}/tcp             #DQM Server" >> /etc/services

[RUNSTEP3]
LABEL=Removing the installation kit
PREREQ=IsDU_FirstInstall ${UXMGR}
CURRENTSTEP=rm -rf ${UNI_INST_DIR} || ( Message "Warning: Could not remove the installation kit ! (Directory: ${UNI_INST_DIR})")

[RUNSTEP4]
LABEL=Increase DQM parameter UXB_NBJOB_MAX
PREREQ=IsDU_FirstInstall ${UXMGR} && [[ ${GO_INSTALL_DQM} = true ]]
CURRENTSTEP=. ${UXMGR}/uxsetenv;[[ -d ${UXDQM} ]] && { { ( F=${UXDQM}/uxstartdqm && \cp -f ${F} ${F}.sav && echo "#!/bin/ksh">${F} && echo "UXB_NBJOB_MAX=2000">>${F} && echo "export UXB_NBJOB_MAX">>${F} && echo "#=============">>${F} && chmod 770 ${F} && cat ${F}.sav >> ${F} ) } || Message "WARNING: Unable to Increase DQM parameter UXB_NBJOB_MAX in file \$UXDQM/uxstartdqm - Please do it manually!"; }

[RUNSTEP5]
LABEL=Installing Dollar Universe cold patches
ANTESTEP=Message "OS is : $(uxgetos)"; Message "Before applying cold patches, uxversion is:";${UXEXE}/uxversion
CURRENTSTEP=. ${UXMGR}/uxsetenv; uxPatch "${KIT_INI_DIR}/internal.ini" "${KIT_FX_DIR}" "${KIT_TMP_DIR}"  "${THISLOGFILE}" "FORCE" "NOVERIF" "PATCHLIST" || ( Message "Patch procedure [FAILED]";exit 1 )
POSTSTEP=Message "After installing patch, uxversion is:";${UXEXE}/uxversion

[RUNSTEP6]
LABEL=Installing licenses
PREREQ=IsDU_FirstInstall ${UXMGR}
CURRENTSTEP=grep "${UNI_NODENAME}" ${KIT_CFG_DIR}/${UNI_LICENCE} >> ${UXMGR}/u_fali01.txt;[[ $? -eq 0 ]] ||  ( (grep "${UNI_GENERIC_NODENAME}" ${KIT_CFG_DIR}/${UNI_LICENCE} ) && ( echo ${UNI_NODENAME} $(grep "${UNI_GENERIC_NODENAME}" ${KIT_CFG_DIR}/${UNI_LICENCE} | awk '{print $2 " " $3 " " $4 " " $5}') >> ${UXMGR}/u_fali01.txt  ) && (Message " ---- WARNING a temporary license has been set up" )) || ( Message "---- WARNING Dollar Universe is installed without licence ... please update the file ${UXMGR}/u_fali01.txt ")
POSTSTEP=Message "License file is now:";ls -al ${UXMGR}/u_fali01.txt

[RUNSTEP7]
LABEL=Delivering uxtrace
CURRENTSTEP=FILE=uxtrace;cp -f data/data/${FILE}* ${UXMGR};[[ $? -eq 0 ]] && { chmod 440 ${UXMGR}/${FILE}*;chmod 550 ${UXMGR}/${FILE};chown ${UNI_USR_ADM}:${UNI_USR_GROUP} ${UXMGR}/${FILE}*; }

[RUNSTEP8]
LABEL=Targeting 1 DQM per company: updating /etc/services
PREREQ=[[ $(grep "^${UNI_COMPANY}_DQM" /etc/services | wc -l) -eq 0 ]]
CURRENTSTEP=. ${UXMGR}/uxsetenv;F_ORIG="/etc/services";F_SAVE="${F_ORIG}.sav.$(date +%Y%m%d-%H%M%S)";cp -pf "${F_ORIG}" "${F_SAVE}" || { Message "Failed to backup file ${F_ORIG} - giving up";exit 1; };sed -e  "/ ${DQM_PORT_NUM}\\/tcp/ s/^DQM /${S_SOCIETE}_DQM /" "${F_SAVE}" > "${F_ORIG}" || { Message "Failed to update file ${F_ORIG} - giving up";exit 1; }
POSTSTEP=Message "tail of /etc/services is now:";tail /etc/services

[RUNSTEP9]
LABEL=Targeting 1 DQM per company: updating uxsrsrv.alias
PREREQ=[[ $(grep "${UNI_COMPANY}_DQM[^_]*$" ${UXMGR}/uxsrsrv.alias | wc -l) -eq 0 ]]
CURRENTSTEP=. ${UXMGR}/uxsetenv;F_ORIG="${UXMGR}/uxsrsrv.alias";F_SAVE="${F_ORIG}.sav.$(date +%Y%m%d-%H%M%S)";cp -pf "${F_ORIG}" "${F_SAVE}" || { Message "Failed to backup file ${F_ORIG} - giving up";exit 1; };sed -e  "/DQM/ s/ DQM/ ${S_SOCIETE}_DQM/" "${F_SAVE}" > "${F_ORIG}" || { Message "Failed to update file ${F_ORIG} - giving up";exit 1; }
POSTSTEP=Message "DQM references in uxsrsrv.alias are now:";grep DQM ${UXMGR}/uxsrsrv.alias

[RUNSTEP10]
LABEL=Detailed Audit Trace in uxsetenv
PREREQ=[[ $(grep "export U_LOG_TRANS" ${UXMGR}/uxsetenv | wc -l) -eq 0 ]]
CURRENTSTEP=echo "#Audit Trace Option">> ${UXMGR}/uxsetenv && echo "U_LOG_TRANS=Y">> ${UXMGR}/uxsetenv && echo "export U_LOG_TRANS" >> ${UXMGR}/uxsetenv

[RUNSTEP11]
LABEL=Detailed Audit Trace in uxsetenv_ksh
PREREQ=[[ $(grep "export U_LOG_TRANS" ${UXMGR}/uxsetenv_ksh | wc -l) -eq 0 ]]
CURRENTSTEP=echo "#Audit Trace Option">> ${UXMGR}/uxsetenv_ksh && echo "U_LOG_TRANS=Y">> ${UXMGR}/uxsetenv_ksh && echo "export U_LOG_TRANS" >> ${UXMGR}/uxsetenv_ksh

[RUNSTEP12]
LABEL=Detailed Audit Trace in uxsetenv_csh
PREREQ=[[ $(grep "setenv U_LOG_TRANS" ${UXMGR}/uxsetenv_csh | wc -l) -eq 0 ]]
CURRENTSTEP=echo "#Audit Trace Option">> ${UXMGR}/uxsetenv_csh && echo "setenv U_LOG_TRANS Y" >> ${UXMGR}/uxsetenv_csh

[RUNSTEP13]
LABEL=Launching Dollar Universe v5 
CURRENTSTEP=BYPASS_INTEGRITY_CHECK=false;export BYPASS_INTEGRITY_CHECK;su ${UNI_USR_ADM} -c "${UXMGR}/uxstartup"
POSTSTEP=Message "List of process:";ps -elf | grep ${UNI_COMPANY}

[RUNSTEP14]
LABEL=Installing Dollar Universe hot patches
ANTESTEP=Message "OS is : $(uxgetos)"; Message "Before applying hot patches, uxversion is:";${UXEXE}/uxversion
CURRENTSTEP=. ${UXMGR}/uxsetenv; uxPatch "${KIT_INI_DIR}/internal.ini" "${KIT_FX_DIR}" "${KIT_TMP_DIR}"  "${THISLOGFILE}" "NO_SHUTDOWN" "NOVERIF" "HOTPATCHLIST" || ( Message "HOT Patch procedure [FAILED]";exit 1 )
POSTSTEP=Message "After installing hot patches, uxversion is:";${UXEXE}/uxversion

[RUNSTEP15]
LABEL=Stopping Dollar Universe v5 
CURRENTSTEP=. ${UXMGR}/uxsetenv;su ${UNI_USR_ADM} -c "${UXMGR}/uxshutdown && sleep 30"
POSTSTEP=Message "List of processes:";ps -elf | grep ${UNI_COMPANY}

[RUNSTEP16]
LABEL=ReStarting Dollar Universe v5 
CURRENTSTEP=. ${UXMGR}/uxsetenv;su ${UNI_USR_ADM} -c "${UXMGR}/uxstartup"
POSTSTEP=Message "List of processes:";ps -elf | grep ${UNI_COMPANY}


[RUNSTEP17]
LABEL=Create SYS_BATCH in DQM and start it
PREREQ=IsDU_FirstInstall ${UXMGR} && [[ ${GO_INSTALL_DQM} = true ]]
ANTESTEP=. ${UXMGR}/uxsetenv;Message "INFO: UXDQM = ${UXDQM}"
CURRENTSTEP=. ${UXMGR}/uxsetenv;su ${UNI_USR_ADM} -c "${UXDQM}/uxaddque SOC=\"${UNI_COMPANY}\" QUEUE=SYS_BATCH JOBLIM=100 && ${UXDQM}/uxstrque SOC=\"${UNI_COMPANY}\" QUEUE=SYS_BATCH" || (Message "FAILED: SYS_BATCH creation/start FAILED. Please create it manually.")
#CURRENTSTEP=. ${UXMGR}/uxsetenv;su ${UNI_USR_ADM} -c "${UXDQM}/uxaddque SOC=\"${UNI_COMPANY}\" QUEUE=SYS_BATCH JOBLIM=100 && ${UXDQM}/uxstrque SOC=\"${UNI_COMPANY}\" QUEUE=SYS_BATCH" || (Message "FAILED: SYS_BATCH creation/start FAILED. Please create it manually.";exit 1)
#POSTSTEP=. ${UXMGR}/uxsetenv;(${UXDQM}/uxshwque SOC=${UNI_COMPANY} QUEUE=SYS_BATCH && Message "SYS_BATCH created successfully") || (Message "FAILED: SYS_BATCH creation/start FAILED. Please create it manually.";exit 1)
POSTSTEP=. ${UXMGR}/uxsetenv;(${UXDQM}/uxshwque SOC=${UNI_COMPANY} QUEUE=SYS_BATCH && Message "SYS_BATCH created successfully") || (Message "FAILED: SYS_BATCH creation/start FAILED. Please create it manually.")

#
# Maintenance uprocs / tasks -> To be replaced by template uprocs
#
#
[RUNSTEP18]
LABEL=Load the Dollar Access Template Uprocs
#PREREQ=[[ -f data/maint/maint_EXP_upr.ext ]]
#PREREQ=[[ -f  data/maint/template_upr.ext ]]
#CURRENTSTEP=. ${UXMGR}/uxsetenv;for DAREA in APP ;do $UXEXE/uxins UPR ${DAREA} upr=* input=data/maint/template_upr.ext ;done
#CURRENTSTEP=. ${UXMGR}/uxsetenv;for DAREA in APP;do $UXEXE/uxins UPR ${DAREA} upr=* input=data/maint/template_upr.ext ;done
CURRENTSTEP=. ${UXMGR}/uxsetenv; echo "...........skipped..........."

[RUNSTEP19]
LABEL=Stopping Dollar Universe v5 
CURRENTSTEP=. ${UXMGR}/uxsetenv;su ${UNI_USR_ADM} -c "${UXMGR}/uxshutdown && sleep 30"
POSTSTEP=Message "List of processes:";echo "...........Skipped..........."
#POSTSTEP=Message "List of processes:";ps -elf | grep ${UNI_COMPANY}

[RUNSTEP20]
LABEL=ReStarting Dollar Universe v5 
CURRENTSTEP=. ${UXMGR}/uxsetenv;su ${UNI_USR_ADM} -c "${UXMGR}/uxstartup"
POSTSTEP=Message "List of processes:";ps -elf | grep ${UNI_COMPANY}

[RUNSTEP21]
LABEL=Cleaning install temporary files
PREREQ=IsDU_FirstInstall ${UXMGR}
CURRENTSTEP=rm -f "/etc/services_maj" "${UNI_PAR_FILE}" || Message "Cleaning install files [FAILED]"

[RUNSTEP22]
LABEL=Cleaning DQM install temporary files
PREREQ=IsDU_FirstInstall ${UXMGR} && [[ ${GO_INSTALL_DQM} = true ]]
CURRENTSTEP=rm -f "/etc/services_maj_dqm" "/etc/services_SAVE_dqm" "${DQM_PAR_FILE}" || Message "Cleaning DQM install files [FAILED]"

[RUNSTEP23]
LABEL=Cleaning installation dir
PREREQ=IsDU_FirstInstall ${UXMGR}
CURRENTSTEP=rm -rf ${UNI_INST_DIR} || Message "Cleaning installation dir [FAILED]"
POSTSTEP=Message "Content of ${UNI_DEST_DIR} is now:";ls -l ${UNI_DEST_DIR}

[RUNSTEP24]
LABEL=Echoing version in uxversion
CURRENTSTEP=szAction="updated";IsDU_FirstInstall ${UXMGR} && szAction="installed";echo "echo \"Successfully ${szAction} by DAUnivkit ${szMessageMainVersion} on $(date +%Y%m%d-%H%M%S)\"" >> $UXEXE/uxversion

[RUNSTEP25]
LABEL=Stopping Dollar Universe v5 
CURRENTSTEP=. ${UXMGR}/uxsetenv;su ${UNI_USR_ADM} -c "${UXMGR}/uxshutdown && sleep 30"
POSTSTEP=Message "List of processes:";ps -elf | grep ${UNI_COMPANY}

[RUNSTEP26]
LABEL=Installing specific files in UXMGR
#CURRENTSTEP=SOURCEDIR=${UNI_SPEC_DIR}/data/mgr;DESTDIR=${REP_MAINT};[[ -d ${SOURCEDIR} ]] && { \cp -fp ${SOURCEDIR}/* ${DESTDIR}; }
CURRENTSTEP=SOURCEDIR=${UNI_SPEC_DIR}/data/mgr;DESTDIR=${UXMGR};[[ -d ${SOURCEDIR} ]] && { \cp -fp ${SOURCEDIR}/* ${DESTDIR}; }

[RUNSTEP27]
LABEL=Managing rights on files in UXMGR
CURRENTSTEP=chown ${UNI_USR_ADM}:${UNI_USR_GROUP} ${UXMGR}/u_fali01.txt ${UXMGR}/uxstartup_gen* ${UXMGR}/uxshutdown_gen ${UXMGR}/U_*_UPROC* ;chmod 750 ${UXMGR}/uxstartup_gen* ${UXMGR}/uxshutdown_gen ${UXMGR}/U_*_UPROC* ;chmod 440 ${UXMGR}/u_fali01.txt; chown ${UNI_USR_ADM}:${UNI_USR_GROUP} ${UXMGR}/ux_rights_v3.sh; chmod 764 ${UXMGR}/ux_rights_v3.sh; 
POSTSTEP=Message "Directory after managing rights:";ls -al ${UXMGR}

[RUNSTEP28]
LABEL=Truning on the library link check and reorganizaiton procedure in the $UXMGR/uxstartup
CURRENTSTEP=. ${UXMGR}/uxsetenv; tmp=/tmp/tmp$$; rgz_line=`grep ux_vrf_rgz_rst $UXMGR/uxstartup|grep "#"`; commented_out=$?; if [ $commented_out -eq 0 ]; then line_no=`grep -n ux_vrf_rgz_rst $UXMGR/uxstartup|cut -f1 -d":"`; echo "before the 1st sed"; sed "${line_no}s/#//g" $UXMGR/uxstartup  > $tmp; mv $UXMGR/uxstartup $UXMGR/uxstartup_bkp; mv  $tmp $UXMGR/uxstartup; fi; echo "before 2nd sed";sed -e "/uxsetenv/a\ sudo /etc/daenv/du/lib_lnk_chk; [ \\\$? -ne 0 ] && exit 1;"  ${UXMGR}/uxstartup > $tmp; mv $UXMGR/uxstartup $UXMGR/uxstartup_bkp; mv  $tmp $UXMGR/uxstartup; chown univa:users $UXMGR/uxstartup; chmod 751 $UXMGR/uxstartup;
POSTSTEP=Message "The resulted uxstartup script";cat ${UXMGR}/uxstartup


